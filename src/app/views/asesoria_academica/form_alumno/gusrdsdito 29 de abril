import { Component, OnInit } from '@angular/core';
import { JarwisService } from '../../../services/jarwis.service';
import { TokenService } from '../../../services/token.service';
import { Router } from '@angular/router';
import { AperturaService } from '../../../services/apertura.service';
import { formArrayNameProvider } from '@angular/forms/src/directives/reactive_directives/form_group_name';
//import * as $ from 'jquery';

let Horarios;
let Horarios1;
let Horarios2;
let Horarios3;
let Horarios4;
let Horarios5;
@Component({
  selector: 'app-form_alumno',
  templateUrl: './form_alumno.component.html',
  styleUrls: ['./form_alumno.component.scss'],
  providers: [AperturaService]
})

export class Form_alumnoComponent implements OnInit {
  activado = false;
  fechaInicio = null;
  fechaFin = null;
  fechaActual = null;
  //hora = [];


  levelNum:number;
  levels:Array<Object> = [
      {num: 0, name: "AA"},
      {num: 1, name: "BB"}
  ];

  toNumber(){
    this.levelNum = +this.levelNum;
    console.log(this.levelNum);
  }





  //Arreglos horarios
  Dia = [];
  HoraInicial = [];
  HoraFinal = [];
  MinutoInicial = [];
  MinutoFinal = [];

  public data = [];

  public form = {
    email: null,
    //name:null,
    name: null,/* localStorage.getItem("nombre"), */
    password: null,
    password_confirmation: null,
    curp: null,
    control: '18240112',
    apep: null,
    apem: null,
    carrera: null,
    celular: null,
    dia: null,
    lunes: null,
    martes: null,
    miercoles: null,
    jueves: null,
    viernes: null,
    checar: null,
    inicio: null,
    fin: null,

  };

  public error = [];

  constructor(private Jarwis: JarwisService,
    private Token: TokenService,
    private router: Router,
    private periodoService: AperturaService,
  ) { }

  onSubmit() {
    alert(this.form.dia)
  }

  /* handleResponse(data){
    this.Token.handle(data.access_token);
    this.router.navigateByUrl('/home');
  }
 
 
  handleError(error){
    this.error= error.error.errors;
  } */

  ngOnInit() {
    this.periodoService.getPeriodo().subscribe(data => {
      this.fechaInicio = data[0].FECHA_INICIO;
      this.fechaFin = data[0].FECHA_FIN;
      this.fechaActual = data[0].FECHA_ACTUAL;
      this.compararFechas();
    });
  }

  compararFechas() {
    var fechaInicio = this.fechaInicio.split('-');
    var fechaFin = this.fechaFin.split('-');
    var fechaActual = this.fechaActual.split('-');
    var fechaInicio2 = new Date(fechaInicio[0], (fechaInicio[1] - 1), fechaInicio[2]);
    var fechaFin2 = new Date(fechaFin[0], (fechaFin[1] - 1), fechaFin[2]);
    var fechaActual2 = new Date(fechaActual[0], (fechaActual[1] - 1), fechaActual[2]);
    if (fechaActual2 >= fechaInicio2 && fechaActual2 <= fechaFin2) {
      console.log('La fecha esta en el rango');
      this.activado = true;
    } else {
      console.log('La fecha no esta en el rango');
    }
  }

  ver() {
    Horarios = [];
    Horarios1 = [];
    Horarios2 = [];
    Horarios3 = [];
    Horarios4 = [];
    Horarios5 = [];

    if (this.form.lunes) {
      this.Jarwis.hora(this.form.control, 1).subscribe(
        data => {
          Horarios1 = data;
          this.compararHorarios();
        },
        error => this.handleError(error)
      );
    } if (this.form.martes) {
      this.Jarwis.hora(this.form.control, 2).subscribe(
        data => {
          Horarios2 = data;
          this.compararHorarios();
        },
        error => this.handleError(error)
      );
    } if (this.form.miercoles) {
      this.Jarwis.hora(this.form.control, 3).subscribe(
        data => {
          Horarios3 = data;
          this.compararHorarios();
        },
        error => this.handleError(error)
      );
    } if (this.form.jueves) {
      this.Jarwis.hora(this.form.control, 4).subscribe(
        data => {
          Horarios4 = data;
          this.compararHorarios();
        },
        error => this.handleError(error)
      );
    } if (this.form.viernes) {
      this.Jarwis.hora(this.form.control, 5).subscribe(
        data => {
          Horarios5 = data;
          this.compararHorarios();
        },
        error => this.handleError(error)
      );
    }

  }

  compararHorarios() {
    Horarios = (Horarios1.concat(Horarios2.concat(Horarios3.concat(Horarios4.concat(Horarios5)))));
  }

  validarHora() {
    var horarios2 = [];
    for (var dia in Horarios) {
      horarios2.push(Horarios[dia].HoraInicial + "," + Horarios[dia].HoraFinal);
    }
    var ite = 0;
    for (var clase in horarios2) {
      var horaClase = horarios2[clase].split(',');
      var ele1 = parseInt(horaClase[0]);
      var ele2 = parseInt(horaClase[1]);
   /*    console.log(ele1);
      console.log(ele2); */

      /*   console.log(horarios2)
        console.log(horarios2.includes("7,8")); // true */

      if (horarios2.includes("8,10") && horarios2.includes("10,12")) {
        //console.log('si esta parce')

        if (ite == 0) {
          if (ele1 > this.form.inicio && ele1 >= this.form.fin) {
            console.log("valido :V");
            break
          }
        }
        if (ele1 <= this.form.inicio && ele2 >= this.form.fin) {
          console.log('hay clase :V')
          this.form.inicio = null;
          this.form.fin = null;
          //break
        }
        if (ele1 > this.form.inicio && ele1 < this.form.fin) {
          console.log('hay clase :V')
          this.form.inicio = null;
          this.form.fin = null;
          //break
        }
        if (ele2 == this.form.inicio && ele2 < this.form.fin) {
          console.log('hay clase :V')
          this.form.inicio = null;
          this.form.fin = null;
          //break
        }
        if (ite == horarios2.length - 1) {
          if (ele1 < this.form.inicio && ele2 < this.form.fin && this.form.inicio > ele2) {
            console.log('valido :V')
            break
          }
        }
      }else if(! horarios2.includes("8,10")){
        console.log('parce :V')
        break
      }else if(! horarios2.includes("10,12")){
        console.log('parce :V')
        break
      }


      //++

      /* if (ite < horarios2.length - 1) {
        if (ele1 < this.form.inicio && ele2 <= this.form.fin) {
          console.log('valido :V')
        }
      } */

      //++


      /* if (ite == horarios2.length - 1) {
        if (ele1 < this.form.inicio && ele2 < this.form.fin && this.form.inicio > ele2) {
          console.log('valido :V')
          break
        }
      } */
      ite++
    }
  }

  handleResponse(data) {
    this.data = data.data;
    console.log(this.data)
  }

  handleError(error) {
    this.error = error.error.error;
  }

}
***************************************************************************************************************************


<div *ngIf="activado" class="container">
  <div class="text-center">
    <h1>DEPARTAMENTO DE DESARROLLO ACADEMICO</h1>
    <h3>PROGRAMA DE ASESORIA ACADEMICA ENTRE ESTUDIANTES</h3>
    <h3>REGISTRO SOLICITUD DE ASESORIA</h3>
  </div>
  <div class="app-body">
    <main class="main d-flex align-items-center">
      <div class="container">
        <div class="row">
          <div class="col-md-6 mx-auto">
            <div class="card-group">
              <div class="card p-3">
                <div class="card-body">
                  <form #alumnoForm=ngForm (ngSubmit)="onSubmit()">
                    <!--  <div class="alert alert-danger" [hidden]="!error.email">
                      {{error.email}}
                    </div> -->
                    <h1>Solicitud de asesoria</h1>
                    <div class="input-group mb-3">
                      <div class="input-group-prepend">
                        <span class="input-group-text"><i class="icon-user"></i></span>
                      </div>
                      <input type="text" name="control" class="form-control" placeholder="Numero de comtrol"
                        id="inputControl" autocomplete="control" [(ngModel)]="form.control" required>
                    </div>
                    <div class="input-group mb-3">
                      <div class="input-group-prepend">
                        <span class="input-group-text"><i class="icon-user"></i></span>
                      </div>
                      <input type="text" name="name" class="form-control" placeholder="Nombre(s)" id="inputName"
                        autocomplete="name" [(ngModel)]="form.name" required>
                    </div>
                    <div class="input-group mb-3">
                      <div class="input-group-prepend">
                        <span class="input-group-text"><i class="icon-user"></i></span>
                      </div>
                      <input type="text" name="apep" class="form-control" placeholder="Apellido Paterno" id="inputApep"
                        autocomplete="apep" [(ngModel)]="form.apep" required>
                    </div>
                    <div class="input-group mb-3">
                      <div class="input-group-prepend">
                        <span class="input-group-text"><i class="icon-user"></i></span>
                      </div>
                      <input type="text" name="apem" class="form-control" placeholder="Apellido Materno" id="inputApem"
                        autocomplete="apem" [(ngModel)]="form.apem" required>
                    </div>
                    <div class="input-group mb-3">
                      <div class="input-group-prepend">
                        <span class="input-group-text"><i class="icon-user"></i></span>
                      </div>
                      <input type="text" name="carrera" class="form-control" placeholder="Carrera" id="inputCarrera"
                        autocomplete="carrera" [(ngModel)]="form.carrera" required>
                    </div>
                    <div class="input-group mb-4">
                      <div class="input-group-prepend">
                        <span class="input-group-text"><i class="icon-envelope-open"></i></span>
                      </div>
                      <input type="email" name="email" class="form-control" placeholder="Correo Electronico"
                        id="inputemail5" autocomplete="email" [(ngModel)]="form.email" required>
                    </div>
                    <div class="input-group mb-3">
                      <div class="input-group-prepend">
                        <span class="input-group-text"><i class="icon-user"></i></span>
                      </div>
                      <input type="text" name="celular" class="form-control" placeholder="Numero Celular"
                        id="inputCelular" autocomplete="celular" [(ngModel)]="form.celular" required>
                    </div>
                    <!--     <div class="input-group mb-3">
                      <div class="input-group-prepend">
                        <span class="input-group-text"><i class="icon-user"></i></span>
                      </div>
                      <select class="form-control" name="dia[]" id="dia" size="5" multiple="" [(ngModel)]="form.dia"
                        required>
                        <option>Lunes</option>
                        <option>Martes</option>
                        <option>Miercoles</option>
                        <option>Jueves</option>
                        <option>Viernes</option>
                      </select>
                    </div> -->
                    <div class="input-group mb-3">
                      <h5>Elige los dias de tu asesoria</h5>
                    </div>

                    <div class="input-group mb-3">
                      <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="inlineCheckbox1" value="option1"
                          (change)="ver()" name="lunes" [(ngModel)]="form.lunes">
                        <label class="form-check-label" for="inlineCheckbox1">Lunes</label>
                      </div>
                      <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="inlineCheckbox2" value="option2"
                          (change)="ver()" name="martes" [(ngModel)]="form.martes">
                        <label class="form-check-label" for="inlineCheckbox2">Martes</label>
                      </div>
                      <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="inlineCheckbox3" value="option3"
                          (change)="ver()" name="miercoles" [(ngModel)]="form.miercoles">
                        <label class="form-check-label" for="inlineCheckbox3">Miercoles</label>
                      </div>
                      <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="inlineCheckbox4" value="option4"
                          (change)="ver()" name="jueves" [(ngModel)]="form.jueves">
                        <label class="form-check-label" for="inlineCheckbox3">Jueves</label>
                      </div>
                      <div class="form-check form-check-inline">
                        <input class="form-check-input" type="checkbox" id="inlineCheckbox5" value="option5"
                          (change)="ver()" name="viernes" [(ngModel)]="form.viernes">
                        <label class="form-check-label" for="inlineCheckbox3">Viernes</label>
                      </div>
                    </div>
                    <div class="input-group mb-3">
                      <h5>Elige la hora de tu asesoria</h5>
                    </div>
                    <div class="input-group mb-3">
                      <div class="input-group-prepend">
                        <span class="input-group-text"><i class="icon-hourglass"></i></span>
                      </div>
                      <!-- <input type="number" name="inicio" class="form-control" placeholder="Hora inicio" id="inputInicio"
                        autocomplete="inicio" min="7" max="20" [(ngModel)]="form.inicio" required> -->

                        <h1>Selecting Number</h1>
                        <select type="number" [(ngModel)]="levelNum" (ngModelChange)="toNumber()">
                          <option *ngFor="let level of levels" [ngValue]="level.num">{{level.name}}</option>
                        </select>
                        {{levelNum}}
                    
                    </div>
                    <div class="input-group mb-3">
                      <div class="input-group-prepend">
                        <span class="input-group-text"><i class="icon-hourglass"></i></span>
                      </div>
                      <input type="number" name="fin" class="form-control" placeholder="Hora fin" id="inputfin"
                        autocomplete="fin" min="8" max="21" [(ngModel)]="form.fin" required>
                    </div>
                    <div class="input-group mb-3">
                      <a class="btn btn-sm btn-pill btn-danger" (click)="validarHora()">Validar Horario</a>
                    </div>
                    <div class="row">
                      <div class="col-6">
                        <button type="submit" class="btn btn-primary px-4"
                          [disabled]="!alumnoForm.valid">Ingresar</button>
                      </div>
                    </div>
                  </form>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>
</div>
*******************************************************************************************************************



    /*  for (var num in horarios2) {
       if (horarios2[num] == '8-10') {
         var index = this.levels.indexOf('8-9');
         this.levels.splice(index, 2);
       }
       if (horarios2[num] == '10-12') {
         var index = this.levels.indexOf('10-11');
         this.levels.splice(index, 2);
       }
       if (horarios2[num] == '12-13') {
         var index = this.levels.indexOf('12-13');
         this.levels.splice(index, 2);
       }
       if (horarios2[num] == '7-7') {
         var index = this.levels.indexOf('7-8');
         this.levels.splice(index, 1);
       }
       if (horarios2[num] == '7-8') {
         var index = this.levels.indexOf('7-8');
         this.levels.splice(index, 1);
       }
       if (horarios2[num] == '8-9') {
         var index = this.levels.indexOf('8-9');
         this.levels.splice(index, 1);
       }
       if (horarios2[num] == '9-10') {
         var index = this.levels.indexOf('9-10');
         this.levels.splice(index, 1);
       }
       if (horarios2[num] == '10-11') {
         var index = this.levels.indexOf('10-11');
         this.levels.splice(index, 1);
       }
       if (horarios2[num] == '11-12') {
         var index = this.levels.indexOf('11-12');
         this.levels.splice(index, 1);
       }
       if (horarios2[num] == '12-13') {
         var index = this.levels.indexOf('12-13');
         this.levels.splice(index, 1);
       }
       if (horarios2[num] == '13-13') {
         var index = this.levels.indexOf('13-14');
         this.levels.splice(index, 1);
       }
       //tardecita d cafe
 
       if (horarios2[num] == '14-15') {
         var index = this.levels.indexOf('14-15');
         this.levels.splice(index, 1);
       }
       if (horarios2[num] == '15-17') {
         var index = this.levels.indexOf('15-16');
         this.levels.splice(index, 2);
       }
       console.log(horarios2[num] == '17-19')
       if (horarios2[num] == '17-19') {
         var index = this.levels.indexOf('17-18');
         this.levels.splice(index, 2);
         console.log('primer if')
       } else if (ite == 0) {
         var index = this.levels.indexOf("17-18");
         this.levels.splice(index, 1);
         console.log(index)
       }else{
         console.log('solo por probarr')
       }
       /* if (horarios2[num] == '17-19') {
         var index = this.levels.indexOf('17-18');
         this.levels.splice(index, 2);
       } 
       if (horarios2[num] == '19-21') {
         var index = this.levels.indexOf('19-20');
         this.levels.splice(index, 2);
       }
       ite++
     }
  */

    /* 
        //var index = this.levels.indexOf()
        if (horarios2.includes("7,8") && horarios2.includes("8,10") && horarios2.includes("10,12") && horarios2.includes("12,13")) {
          var index = this.levels.indexOf('7-8');/* 
        var index1 = this.levels.indexOf(8);
        var index2 = this.levels.indexOf(9);
        var index3 = this.levels.indexOf(10);
        var index4 = this.levels.indexOf(11);
        var index5 = this.levels.indexOf(12);
        var index6 = this.levels.indexOf(13);  
          this.levels.splice(index, 7);
          console.log(this.levels)
        }
        if (horarios2.includes("8,10") && horarios2.includes("10,12") && horarios2.includes("12,13")) {
          var index = this.levels.indexOf('8-9');
          this.levels.splice(index, 6);
        }
        if (horarios2.includes("10,12") && horarios2.includes("12,13")) {
          var index = this.levels.indexOf('10-12');
          this.levels.splice(index, 4);
        }
        if (horarios2.includes("12,13")) {
          var index = this.levels.indexOf('12-13');
          this.levels.splice(index, 2);
        }
        if (horarios2.includes("8,10") && horarios2.includes("10,12") && horarios2.includes("12,13")) {
          var index = this.levels.indexOf('8-9');
          this.levels.splice(index, 6);
        } */
        *******************************************************************************************
        import { Component, OnInit } from '@angular/core';
import { JarwisService } from '../../../services/jarwis.service';
import { TokenService } from '../../../services/token.service';
import { Router } from '@angular/router';
import { AperturaService } from '../../../services/apertura.service';
import { formArrayNameProvider } from '@angular/forms/src/directives/reactive_directives/form_group_name';
import { CodegenComponentFactoryResolver } from '@angular/core/src/linker/component_factory_resolver';
//import * as $ from 'jquery';

let Horarios;
let Horarios1;
let Horarios2;
let Horarios3;
let Horarios4;
let Horarios5;
@Component({
  selector: 'app-form_alumno',
  templateUrl: './form_alumno.component.html',
  styleUrls: ['./form_alumno.component.scss'],
  providers: [AperturaService]
})

export class Form_alumnoComponent implements OnInit {
  activado = false;
  fechaInicio = null;
  fechaFin = null;
  fechaActual = null;
  //hora = [];


  /* levels:Array<Object> = [
    {num: 0, name: "7-8"},
    {num: 1, name: "8-9"}
]; */
  levels = [];






  //Arreglos horarios
  Dia = [];
  HoraInicial = [];
  HoraFinal = [];
  MinutoInicial = [];
  MinutoFinal = [];

  public data = [];

  public form = {
    email: null,
    //name:null,
    name: null,/* localStorage.getItem("nombre"), */
    password: null,
    password_confirmation: null,
    curp: null,
    control: '18240021',
    apep: null,
    apem: null,
    carrera: null,
    celular: null,
    dia: null,
    lunes: null,
    martes: null,
    miercoles: null,
    jueves: null,
    viernes: null,
    checar: null,
    inicio: null,
    fin: null,
    levelNum: '0',

  };

  toNumber() {
    //this.levelNum = +this.levelNum;
    console.log(this.form.levelNum + ' no se que sea');
  }
  public error = [];

  constructor(private Jarwis: JarwisService,
    private Token: TokenService,
    private router: Router,
    private periodoService: AperturaService,
  ) { }

  onSubmit() {
    alert(this.form.dia)
  }

  /* handleResponse(data){
    this.Token.handle(data.access_token);
    this.router.navigateByUrl('/home');
  }
   
   
  handleError(error){
    this.error= error.error.errors;
  } */

  ngOnInit() {
    this.periodoService.getPeriodo().subscribe(data => {
      this.fechaInicio = data[0].FECHA_INICIO;
      this.fechaFin = data[0].FECHA_FIN;
      this.fechaActual = data[0].FECHA_ACTUAL;
      this.compararFechas();
    });
  }

  compararFechas() {
    var fechaInicio = this.fechaInicio.split('-');
    var fechaFin = this.fechaFin.split('-');
    var fechaActual = this.fechaActual.split('-');
    var fechaInicio2 = new Date(fechaInicio[0], (fechaInicio[1] - 1), fechaInicio[2]);
    var fechaFin2 = new Date(fechaFin[0], (fechaFin[1] - 1), fechaFin[2]);
    var fechaActual2 = new Date(fechaActual[0], (fechaActual[1] - 1), fechaActual[2]);
    if (fechaActual2 >= fechaInicio2 && fechaActual2 <= fechaFin2) {
      console.log('La fecha esta en el rango');
      this.activado = true;
    } else {
      console.log('La fecha no esta en el rango');
    }
  }

  ver() {
    Horarios = [];
    Horarios1 = [];
    Horarios2 = [];
    Horarios3 = [];
    Horarios4 = [];
    Horarios5 = [];

    if (this.form.lunes) {
      this.Jarwis.hora(this.form.control, 1).subscribe(
        data => {
          Horarios1 = data;
          this.compararHorarios();
          // this.borraHora();
        },
        error => this.handleError(error)
      );
    } if (this.form.martes) {
      this.Jarwis.hora(this.form.control, 2).subscribe(
        data => {
          Horarios2 = data;
          this.compararHorarios();
          // this.borraHora();
        },
        error => this.handleError(error)
      );
    } if (this.form.miercoles) {
      this.Jarwis.hora(this.form.control, 3).subscribe(
        data => {
          Horarios3 = data;
          this.compararHorarios();
          //this.borraHora();
        },
        error => this.handleError(error)
      );
    } if (this.form.jueves) {
      this.Jarwis.hora(this.form.control, 4).subscribe(
        data => {
          Horarios4 = data;
          this.compararHorarios();
          //this.borraHora();
        },
        error => this.handleError(error)
      );
    } if (this.form.viernes) {
      this.Jarwis.hora(this.form.control, 5).subscribe(
        data => {
          Horarios5 = data;
          this.compararHorarios();
          //this.borraHora();
        },
        error => this.handleError(error)
      );
    }
  }

  compararHorarios() {
    Horarios = (Horarios1.concat(Horarios2.concat(Horarios3.concat(Horarios4.concat(Horarios5)))));
  }

  /*  validarHora() {
     var horarios2 = [];
     for (var dia in Horarios) {
       horarios2.push(Horarios[dia].HoraInicial + "," + Horarios[dia].HoraFinal);
     }
     var ite = 0;
     for (var clase in horarios2) {
       var horaClase = horarios2[clase].split(',');
       var ele1 = parseInt(horaClase[0]);
       var ele2 = parseInt(horaClase[1]);
 
       if (horarios2.includes("8,10") && horarios2.includes("10,12")) {
         //console.log('si esta parce')
 
         if (ite == 0) {
           if (ele1 > this.form.inicio && ele1 >= this.form.fin) {
             console.log("valido :V");
             break
           }
         }
         if (ele1 <= this.form.inicio && ele2 >= this.form.fin) {
           console.log('hay clase :V')
           this.form.inicio = null;
           this.form.fin = null;
           //break
         }
         if (ele1 > this.form.inicio && ele1 < this.form.fin) {
           console.log('hay clase :V')
           this.form.inicio = null;
           this.form.fin = null;
           //break
         }
         if (ele2 == this.form.inicio && ele2 < this.form.fin) {
           console.log('hay clase :V')
           this.form.inicio = null;
           this.form.fin = null;
           //break
         }
         if (ite == horarios2.length - 1) {
           if (ele1 < this.form.inicio && ele2 < this.form.fin && this.form.inicio > ele2) {
             console.log('valido :V')
             break
           }
         }
       } else if (!horarios2.includes("8,10")) {
         console.log('parce :V')
         break
       } else if (!horarios2.includes("10,12")) {
         console.log('parce :V')
         break
       }
       ite++
     }
   } */


  borraHora() {
    this.levels = new Array('7-8', '8-9', '9-10', '10-11', '11-12', '12-13', '13-14', '14-15', '15-16', '16-17', '17-18', '18-19', '19-20', '20-21');
    var horarios2 = [];
    for (var dia in Horarios) {
      horarios2.push(Horarios[dia].HoraInicial + "-" + Horarios[dia].HoraFinal);
    }

    if (horarios2.indexOf('7-8') != -1) {
      var index = this.levels.indexOf('7-8');
      this.levels.splice(index, 1);
    } else {

    } if (horarios2.indexOf('8-10') != -1) {
      var index = this.levels.indexOf('8-9');
      this.levels.splice(index, 2);
    } else {

    } if (horarios2.indexOf('10-12') != -1) {
      var index = this.levels.indexOf('10-11');
      this.levels.splice(index, 2);
    } else {

    } if (horarios2.indexOf('12-13') != -1) {
      var index = this.levels.indexOf('12-13');
      this.levels.splice(index, 2);
    } else {

    } if (horarios2.indexOf('7-7') != -1) {
      var index = this.levels.indexOf('7-8');
      this.levels.splice(index, 1);
    } else {

    } if (horarios2.indexOf('7-8') != -1) {
      var index = this.levels.indexOf('7-8');
      this.levels.splice(index, 1);
    } else {

    } if (horarios2.indexOf('8-9') != -1) {
      var index = this.levels.indexOf('8-9');
      this.levels.splice(index, 1);
    } else {

    } if (horarios2.indexOf('9-10') != -1) {
      var index = this.levels.indexOf('9-10');
      this.levels.splice(index, 1);
    } else {

    } if (horarios2.indexOf('10-11') != -1) {
      var index = this.levels.indexOf('10-11');
      this.levels.splice(index, 1);
    } else {

    } if (horarios2.indexOf('11-12') != -1) {
      var index = this.levels.indexOf('11-12');
      this.levels.splice(index, 1);
    } else {

    }
    if (horarios2.indexOf('12-13') != -1) {
      var index = this.levels.indexOf('12-13');
      this.levels.splice(index, 1);
    } else {

    }
    if (horarios2.indexOf('13-13') != -1) {
      var index = this.levels.indexOf('13-14');
      this.levels.splice(index, 1);
    } else {

    }
    //tarde 
    if (horarios2.indexOf('14-15') != -1) {
      var index = this.levels.indexOf('14-15');
      this.levels.splice(index, 1);
    } else {

    }
    if (horarios2.indexOf('15-17') != -1) {
      var index = this.levels.indexOf('15-16');
      this.levels.splice(index, 2);
    } else {
    }
    if (horarios2.indexOf('17-19') != -1) {
      var index = this.levels.indexOf('17-18');
      this.levels.splice(index, 2);
    } else {
      var index = this.levels.indexOf('17-18');
      this.levels.splice(index, 1);
    }
    if (horarios2.indexOf('19-21') != -1) {
      var index = this.levels.indexOf('19-20');
      this.levels.splice(index, 2);
    } else {
      var index = this.levels.indexOf('19-20');
      this.levels.splice(index, 1);
    }
    //viernes tarde
    if (horarios2.indexOf('14-14') != -1) {
      var index = this.levels.indexOf('14-15');
      this.levels.splice(index, 1);
    } else {
    }
    if (horarios2.indexOf('15-16') != -1) {
      var index = this.levels.indexOf('15-16');
      this.levels.splice(index, 1);
    } else {
    }
    if (horarios2.indexOf('16-17') != -1) {
      var index = this.levels.indexOf('16-17');
      this.levels.splice(index, 1);
    } else {
    }
    if (horarios2.indexOf('17-18') != -1) {
      var index = this.levels.indexOf('17-18');
      this.levels.splice(index, 1);
    } else {
    }
    if (horarios2.indexOf('18-19') != -1) {
      var index = this.levels.indexOf('18-19');
      this.levels.splice(index, 2);
    } else {
    }
    if (horarios2.indexOf('19-20') != -1) {
      var index = this.levels.indexOf('19-20');
      this.levels.splice(index, 2);
    } else {
    }
    if (horarios2.indexOf('20-21') != -1) {
      var index = this.levels.indexOf('20-21');
      this.levels.splice(index, 2);
    } else {
    }
  }

  handleResponse(data) {
    this.data = data.data;
    console.log(this.data)
  }

  handleError(error) {
    this.error = error.error.error;
  }

}